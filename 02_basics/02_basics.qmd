---
title: "02 - R Basics"
format:
  html: default
  pdf: default
  docx: default
---

The aim of this module is to familiarise you with how R works and how to read in and apply basic manipulations on your data. Here, we will be working with similar but slightly shorter version of the Global Burden of Disease dataset than we did for the bar plots.


# Getting help

RStudio has a built in Help tab. To use the Help tab, move your cursor to something in your code (e.g. `read_csv()`) and press F1 - this will show you the definition and some examples. However, the Help tab is only useful if you already know what you are looking for but can't remember how it worked exactly. For finding help on things you have not used before, it is best to Google it. R has about 2 million users so someone somewhere has had the same question or problem.

# Starting with a blank canvas

In the first session we loaded some data that we then plotted. When we import data, R remembers the data and stores it in the Environment tab.

It's good practice to Restart R before starting new work, as it's best to use fresh up to date data - otherwise we could accidentally use data which has nothing to do with our work. Restarting R only takes a second!

* Restart R (Control+Shift+F10 or select it from Session -> Restart R).

RStudio has a default option that is not best practice any more, you should do this (once only):

* Go to Tools -> Global Options -> General and set "Save .RData on exit" to Never. This does not mean you can't or shouldn't save your work in .RData/.rda files. But it is best to do it consciously and load exactly what you need to load, rather than letting R always save and load everything for you, as this could also include broken data or objects.


# Working with Objects

It's sometimes difficult to appreciate how coding works without trying it first.

These exercises will show you how R works.

We'll first create an object and call it `a`, we will give the object `a` a value of 1.

In R the equals `=` sign tells R to give the object on the left of the sign the value of whatever is on the right of the sign.

```{r}
a = 1
```

In your environment panel, you should see `a` appear under the `Values` section.

Now, lets create `b` and give it a value of 2.

```{r}
b = 2
```

Lets now add `a` and `b` together to create the object `c`

```{r}
c = a + b 

#Print the value of c
c


```

All of R is just an extension of this: applying more complex functions (calculations) across more complex objects.

It's important to appreciate that objects can be more than just single numbers too. They can be entire spreadsheets, which in R are known as `tibbles`.

Note that many people use `<-` instead of `=`. They mean the same thing in R. `=` and `<-` save what is on the right into the name on the left. There is also a left-to-right operator: `->`.

## Exercise 1

Create 3 new variables, `d`, `e`, `f` with values 6, 7, 8 using the different assignment operators.

```{r}
# Exercise 1 - your R code:

```


# Loading data

In Session 1, we loaded the dataset from an `.rda` file (which stands for R data). Here we are reading in a `csv` (comma-separated values). Note that `.rda` files are loaded using `load(here::here("filename.rda"))`, whereas other formats are read using `read_()` where different formats could come after the underscore, e.g., `read_csv()` or `read_excel()`. You can use the Import Dataset button in the Environment tab to get RStudio to give you the relevant syntax for different file formats.



```{r}
library(tidyverse) #Tidyverse is the package which contains some of the code we want to use

mydata = read_csv(here::here("global_burden_disease_short.csv"))

```

Loading `library(tidyverse)` returns a message listing all of the packages that get loaded (tidyverse is a collection of packages). It also lists two conflicts, which are expected and normal. It just means that the `dplyr` package (part of the tidyverse) has two functions with the same names as the `stats` package does.

But how can we look at the data we just loaded? How do we know which variables it contains? Hint: the Environment tab.

## here::here()

`here::here()` is a function that helps R find files. This is useful if working on a big project where files are stored in different folders within the project (like this course).

## Exercise 2

Answer these question about your data:

1. At present, how many variables are there?

2. How many deaths were there from communicable diseases in 1990? Hint: clicking on columns when viewing a tibble orders it.



## Other ways to investigate objects

In most cases, you can rely on the Environment tab to see how many variables you have. If, however, the dataset you are using is too big to easily navigate within, you might need to use `mydata %>% names()` and`mydata %>% head()`.

Furthermore, we can select a single column using the dollar sign: `$`.

So if we type:

```{r}
mydata$deaths
```

R will give us all the data for that variable.

## Exercise 3

1. Insert a new code chunk here (there is a `+C` Insert button at the top of this document).
2. Add `mydata %>% names()` and `mydata %>% head()` to this new chunk and run them. Feel free to copy-paste from the instructions, or if typing in, make sure to use the keyboard shortcut `Control+Shift+M`.
3. How many unique values does the `cause` variable have? Hint: pipe `mydata$cause` into `unique()` to get all the different options printed.
4. With a short list of values, we can just count them up. But if your variable included tens of unique values, we can use `n_distinct()` to get the number. Pipe `mydata$cause` into `n_distinct()` to try this out.



# Operators

Operators are symbols in R Code that tell R how to handle different pieces of data or objects.

You can find a full list of the operators we use on the HealthyR Quick-start cheat sheet.

Some of these operators can be used to ask questions about your data. For example, are values in a column greater than/smaller than/equal to a reference value.

Examples will make this clearer, try this code, running it line-by-line (Ctrl+Enter):

```{r}
# Run these lines, what is the output telling us?
mydata$year
mydata$year > 1500

# How about this one?

mydata$year < 2000

```



Another useful operator is the '==' (very easily and commonly confused with the `=`). The double equals tells R to compare two things and ask if they are equal. If they are equal R will return 'TRUE', if not R will return 'FALSE'.

```{r}
# Returns a TRUE/FALSE for each of the 18 values in the tibble
mydata$cause == "Injuries"

# What happens if you accidentally do this instead?
mydata$cause = "Injuries"

mydata %>% head()
```

Since the second example (using the single equals `=`) assigned the word "Injuries" to the whole of column cause (over-writing the Communicable and Non-communicable values), we need to read in the original data again:

```{r}
mydata = read_csv(here::here("global_burden_disease_short.csv"))

mydata %>% head()
```

 
# Filtering data

Printing out a list of TRUE/FALSE values might have seemed a bit obscure, but the comparisons operators (==, !=, <, >, <=, >=) are actually used for filtering data. For example, if we wanted to select the years in the Global Burden of disease study after 2000 (and including 2000) we could type the following:

```{r}
mydata %>% 
  filter(year >= 2000)
```


Just sending mydata into a filter gets the result printed out. To save it in the Environment, we also need to use the assignment operator:


```{r}

mydata_filtered = mydata %>% 
  filter(year >= 2000)

```

How would you change the above code to only include years greater than 2000 (so not including 2000 itself too)? Hint: look at the table of operators on your HealthyR QuickStart Sheet.

## Exercise 4

Modify the above example to filter for year 2000 only, not all years greater than 2000. Save it into a variable called `mydata_year2000`.

```{r}
# Exercise 4 - your R code:

```


## Worked example

Let's practice this and combine multiple selections together.

This '|' means OR and '&' means AND.

From `mydata`, select the lines where year is either *1990 or 2013* and cause is "Communicable diseases":

```{r}

new_data_selection = mydata %>% 
  filter( (year == 1990 | year == 2013) & cause == "Communicable diseases")

# or we can get rid of the extra brackets around the years
# by moving cause into a new filter on a new line:

new_data_selection = mydata %>% 
  filter(year == 1990 | year == 2013) %>% 
  filter(cause == "Communicable diseases")


```



# Types of variables

Like many other types of statistical software, R needs to know what is the variable type of each column. The main types are:

## Characters

**Characters** (sometimes referred to as *strings* or *character strings*) in R are letters, words, or even whole sentences (an example of this may be free text comments). We can specify these using the `as.character()` function. Characters are displayed in-between `""` (or `''`).

## Factors

**Factors** are fussy characters. Factors are fussy because they have something called levels. Levels are all the unique values this variable could take - e.g. like when we looked at `mydata$cause %>% unique()`.
Using factors rather than just characters can be useful because:


* The values factor levels can take is fixed. For example, if the levels of your column called `sex` are "Male" and "Female" and you try to add a new patient where sex is called just "F" you will get a warning from R. If `sex` was a character column rather than a factor R would have no problem with this and you would end up with "Male", "Female", and "F" in your column.
* Levels have an order. When we plotted the different causes of death in the last session, R ordered them alphabetically (because `cause` was a character rather than a factor). But if you want to use a non-alphabetical order, e.g. "Communicable diseases"-"Non-communicable diseases"-"Injuries", we need make `cause` into a factor. Making a character column into a factor enables us to define and change the order of the levels. Furthermore, there are useful tools such as `fct_inorder` or `fct_infreq` that can order factor levels for us.


These can be huge benefits, especially as a lot of medical data analyses include comparing different risks to a reference level. Nevertheless, the fussiness of factors can sometimes be unhelpful or even frustrating. For example, if you really did want to add a new level to your `gender` column (e.g., "Prefer not to say") you will either have to convert the column to a character, add it, and convert it back to a factor, or use `fct_expand` to add the level and then add your new line.


## Numbers

Self-explanatory! These are numbers. In R, we specify these using the `as.numeric()` function. Sometimes numerics are further differentiated based on whether they have decimal places or not. `Integer` stands for a number without decimal places, whereas a `double` would have decimal places.

Click on the blue arrow in front of `mydata` in the Environment tab and check that R knows that `cause` is a character (`chr`), whereas `year` and `deaths` are numbers (`num`).


# Adding columns to tibbles

The function for adding new columns (or making changes to existing ones) to a tibble is called `mutate()`:

```{r}
mydata %>% 
  mutate(new = 1:18)
```


Conversely, if we want to delete a specific variable or column we use `select()` with the dropped variable subtracted.

The following code however, will return an error:

```{r}
#| eval: false
mydata %>% 
  select(-new)
```

The reason for this error is that when we added the new column using `mutate(new = 1:18)` it got printed, but not saved back to the Environment, because we didn't use the assignment operator in front of the whole tibble. 

## Exercise 5

Change the code in the chunk where we used mutate to include `mydata = mydata %>%`, run it, check the tibble from the Environment tab to make sure the column `new` exist. Then try removing it again with the `select()` function.

If you click on mydata in the Environment tab after running the code chunk above with `select(-new)`, you will see that the variable is still included. That's because, again, we didn't use the assignment operator when performing the select. So it got printed for us to see, but not saved to the Environment. Remember to add in `mydata = ` on the first line, immediately before `mydata`.

Troubleshooting Exercise 5:

* `Error: Can't subset columns that don't exist. x Column `new` doesn't exist.` is R's way of saying "I can't find `-new`". You will see this if you try to run the chunk twice - so trying to drop a column that has already been dropped so does not exist any more.

* If you misspell a variable name when using select positively (e.g. to only select one variable, such as `mydata %>% select(cause)`), it will give an error of `Error in .f(.x[[i]], ...) : object 'cuase' not found`.


# Calculated variables


We can make new variables using calculations based on variables in the tibble.

The mutate function is useful here. All you have to specify within the mutate function is the name of the variable (this can be new or pre-existing) and where the new data should come from.


```{r}
# Worked example - adding two new columns to mydata using mutate():
mydata = mydata %>% 
  mutate(years_from_1990 = year-1990,
         deaths_millions = deaths/1000000) 
```

## Exercise 6

Re-write `mydata$new = 1` using `mutate()`.

```{r}
# Exercise 6 - your R code:

```


In this simple case, the solution using `mutate()` will actually be a bit longer than the original `$` way of doing it. However, in most cases, `mutate()` is much better, as you can potentially include multiple variables. So for the rest of this course, we will be adding and modifying columns using `mutate()`, and not `$`. But the `$` is useful for quickly printing out a column.


# Rounding numbers

We can use `round()` to round the new variables to create integers.

## Exercise 7

Round the new column `deaths_millions` to no decimals. Hint: copy a `mutate()` example from above modify it, rather than typing in `mydata %>% mutate()...` by hand. This is not only faster, but this methodology of copy-paste-edit makes even more sense once the examples get longer. Furthermore, the workflow of Google-copy-paste-edit is appropriate both when learning programming, but professionals also use it to look up things they don't use frequently enough to memorise them.


```{r}
# Exercise 7 - your R code:

```

* How would you round it to 2 decimals? Hint: click on `round()` in the code chunk, then press F1 and its Help page will pop up. Investigate the Examples at the very bottom. Alternatively, search the internet for "r round decimals" to get examples.

#The combine function: c()

The combine function combines several values: `c()`

The combine function can be used with numbers or characters (like words or letters):

```{r}
# This line creates a new object (sends it to the Environment)
examplelist = c("Red", "Yellow", "Green", "Blue")
# This line prints the new object
examplelist
```

#The `paste()` function

The `paste()` function is used to paste several words or numbers into one character variable/sentence.

In the paste function we need to specify what we would like to combine, and what should separate the components. By default, the separation is a space, but we can change this using the `sep =` option within the paste function.

So, for example if we wanted to make a sentence:

```{r}
paste("Edinburgh", "is", "Great")

#Lets add in full stopsÖ
paste("Edinburgh", "is", "Great", sep = ".")

#If we really like Edinburgh
paste("Edinburgh", "is", "Great", sep = "!")

#If we want to make it one word
paste("Edinburgh", "is", "Great", sep = "") # no separator (still need the brackets)
```

We can also join two different variables together using `paste()`: 


```{r}
paste("Year is", mydata$year)
```


## Exercise 8

Fix this code: `paste(Today is, today())`

NB - today() is a function from the lubridate package which gives the current date.

Hint: Think about how we always add quotes around characters.

```{r}
# Exercise 8 - your R code:

```


# Combining two tibbles

For combining tibbles based on shared variables we use the Joins: `left_join()`, `right_join()`, `inner_join()`, or `full_join()`. Let's split some of the variables in `mydata` between two new tibbles: `first_data` and `second_data`. For demonstrating the difference between the different joins, we will only include a subset (first 6 rows) of the dataset in `second_data`. We are also including slightly different variables in the two new tibbles (note the deaths vs deaths_millions). Investigate the four different joins in the code chunk below (Cntr+Enter) and discuss how the number of rows in the output changes and how they might work.

```{r}

first_data  = select(mydata, year, cause, deaths)
second_data = select(mydata, year, cause, deaths_millions) %>% slice(1:6)

#change the order of rows in first_data to demosntrate the join does not rely on the ordering of rows:
first_data = arrange(first_data, deaths)

left_join(first_data, second_data)
right_join(first_data, second_data)
inner_join(first_data, second_data)
full_join(first_data, second_data)

```

Hint: In this example, `left_join()` and `full_join()` return the exact same thing, why is that?

Those who have used R before, or those who come across older scripts will have seen `merge()` instead of the joins. `merge()` works similarly to joins, but instead of having the four options defined clearly at the front, you would have had to use the `all = FALSE, all.x = all, all.y = all` arguments. We don't recommend using `merge()` any more.


# The `summary()` Function

In R, the `summary()` function provides a quick way of summarising both data or the results of statistical tests.

Lets get a quick summary of all the variables inside the Global Burden of Disease dataset. It will work for whole datasets and single variables too.

```{r}
mydata %>% summary()
```

This even works on statistical tests (we will learn more about these later):

```{r}
# lm stands for linear model
lm(deaths ~ year, data = mydata) %>% summary()
```

## When pipe sends data to the wrong place

Note that our usual way of doing things with the pipe would not work here:


```{r, eval = FALSE}
mydata %>% 
  lm(deaths ~ year) %>%
  summary()
```

This is because the pipe tries to send data into the first place of the function (first argument), but `lm()` wants the formula (`deaths ~ year`) first, then the tibble We can bypass this using `data = .` to tell the pipe where to put mydata:

```{r, eval = FALSE}
mydata %>% 
  lm(deaths ~ year, data = .) %>%
  summary()

```

# Creating a tibble from scratch

It is rare that you will need to create a tibble by hand as most of the time you will be reading in a data from a .csv or similar. But in some cases (e.g., when creating special labels for a plot) it might be useful, so this is how to create one:


```{r}

patient_id = paste0("ID", 1:10)
sex        = rep(c("Female", "Male"), 5)
age        = 18:27

newdata = tibble(patient_id, sex, age)

#same as

newdata      = tibble(
  patient_id = paste0("ID", 1:10), #note the commas
  sex        = rep(c("Female", "Male"), 5),
  age        = 18:27
)


```


# The if-else statement

The `if_else()` function is very useful when used inside `mutate()` - as it can be used to create a new variable based on the same conditions we used for filtering data previously.

For example, we can add a new variable called `deaths_over_10m` which indicates whether there were more than 10 million deaths for a cause.


```{r}
mydata = mydata %>% 
  mutate(deaths_over_10m = if_else(deaths_millions >= 10, "More than 10 mil", "Less than 10 mil"))



mydata %>% 
  count(deaths_over_10m)

```

Investigate the output of count(), do the numbers add up/correspond to what you see when investigating mydata as a whole?


# Solutions

## Exercise 1 solution

```{r}
d  = 6
e <- 7
8 -> f
```


## Exercise 3 solution

```{r}
mydata %>% names()
mydata %>% head()

mydata$cause %>% unique()

mydata$cause %>% n_distinct()
```


## Exercise 4 solution
```{r}
mydata_year2000 = mydata %>% 
  filter(year == 2000)
```

## Exercise 5 solution

```{r, eval = FALSE}
mydata = mydata %>% 
  select(-new)
```


## Exercise 6 solution

```{r}
mydata = mydata %>% 
  mutate(new = 1)
```

## Exercise 7 solution

```{r}
mydata = mydata %>% 
  mutate(deaths_millions = round(deaths_millions))
```

## Exercise 8 solution

```{r}
paste("Today is", today())
```

