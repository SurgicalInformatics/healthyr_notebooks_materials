---
title: "06 - Factors - handling categorical data"
format:
  html: default
  pdf: default
  docx: default
---

# Data
We are now changing to a new dataset: melanoma. Remember to Restart your R session to clear up the Environment from the previous session.

```{r}
#| message: false

library(tidyverse)
library(finalfit)
library(broom)

# the following code cleverly loads it from the package 
# as it's an example dataset included with the boot package
mydata = boot::melanoma 

# your data usually arrives in a csv file:
mydata = read_csv(here::here("melanoma_data.csv"))

```

Click on mydata in your Environment and have a look at the values - you'll see that categorical variables are coded as numbers, rather than text. You will need to recode these numbers into proper factors. 


# Recoding factors - `fct_recode()`

Press F1 on `boot::melanoma` to see its description. Use the information from help to change the numbers (e.g. 0 - female, 1 - male) into proper factors.

```{r}
mydata = mydata %>% 
  mutate(status.factor = status %>% 
           factor() %>% 
           fct_recode("Died"  = "1",
                      "Alive" = "2",
                      "Died - other causes" = "3"))
  

mydata = mydata %>%
  mutate(sex.factor = sex %>% 
           factor() %>% 
           fct_recode("Female" = "0",
                      "Male"   = "1"))
  
mydata = mydata %>%
  mutate(ulcer.factor = ulcer %>% 
           factor() %>% 
           fct_recode("Present" = "1",
                      "Absent"  = "0"))
```


# Change the order of values within a factor - `fct_relevel()`

While character columns are plotted or ran through statistical tests in an alphabetical order, with factors we can use any order we define

For example, look at the order of levels of `mydata$status_factor` (levels are all the unique and ordered values a factor can have):

```{r}
mydata$status.factor %>% levels()
```

The reason "Alive" is currently second, and not alphabetical is, that in the original factor it was number "2". And when we recoded "2" to "Alive", it retained its order. If, however, we want to make comparisons relative to "Alive", we need to move it to the front by using `fct_relevel()`:



```{r}
mydata = mydata %>% 
  mutate(status.factor = status.factor %>%
           fct_relevel("Alive"))
```

```{r}
mydata$status.factor %>% levels()
```

# Group factor levels together - `fct_collapse()`

`status.factor` currently has 3 levels, but we might want to make it binary so let's group "Died - other causes"' with those "Alive", to give a disease-specific mortality variable:


```{r}
mydata = mydata %>%
  mutate(status.factor = status.factor %>% 
	fct_collapse("Alive" = c("Alive", "Died - other causes")))
```

```{r}
mydata$status.factor %>% levels()
```

# Converting a continuous (numeric) variable into a categorical variable - `cut()`

Sometimes we want to cut a numeric variable into categories. This may be when dealing with known tresholds (e.g. it is known that e.g. 5 mg of something is completely harmless but that there is a step change after that). Another reason for cutting a continuous variable into categories is if it doesn't have a linear response to the outcome but we want to use a linear model.

```{r}
mydata = mydata %>%
  mutate(age.factor = age %>% 
           cut(breaks = c(4,20,40,60,95), include.lowest = TRUE))
```

* `include.lowest = TRUE` is a necessary historical quirk of the `cut()` function. Without it, the lowest value (in this case, 4 years old) would get set to NA (missing). Without `include.lowest = TRUE` the lowest level would be "(4,20]" which doesn't include 4 like the `[4` does.

## Exercise 1

Investigate `mydata$age.factor` and use `fct_recode()` to give it more human readable levels.

```{r}
mydata$age.factor %>% levels()
```

For example:

```{r, eval = FALSE}
mydata = mydata %>%
  mutate(age.factor = age.factor %>% 
           fct_recode(" 4 to 20" = "[4,20]"))
```

```{r, echo = FALSE}
mydata = mydata %>%
  mutate(age.factor = age.factor %>% 
           fct_recode(" 4 to 20" =  "[4,20]",
                      "21 to 40" = "(20,40]",
                      "41 to 60" = "(40,60]",
                      "61 to 95" = "(60,95]"))
```
Note: if you are running this notebook interactively (by clicking `ctrl+enter` in each chunk of code) you might see a warning message here telling you that there is an unknown level in `f`. All this means is that because you renamed the level the first time you used `fct_recode` it can't find the original name (`[4,20]`). In this case we can safely ignore the message because we have already changed the value. The message is usually helpful if you accidentally mistype a factor level so that you can then change it.

Add in more lines to the recode to achieve these levels for `mydata$age.factor:

```{r}
mydata$age.factor %>% levels()
```


# Save the recoded tibble as an `.rda` file

Previously, we have shown you how to write data back out from R into a spreadsheet (`write_csv()`). But when you read in a spreadsheet, it will not know which variables are factors, and which just plain characters. And therefore, it won't know which order to plot the factors in - you will have to reapply the `fct_relevel()` line.

For saving tibbles as `.rda` (R data) files, we do:

```{r}
save(mydata, file = here::here("melanoma_factored.rda"))
```

Remember: `.rda` files are read in using load: 

```{r}
load(here::here("melanoma_factored.rda"))
```

Whereas spreadsheets (or formats from other stats packages) are read:

```{r, eval = FALSE}
#read_csv(here::here("global_burden_disease_short.csv"))
```


## Plotting

Always plot new data first!

```{r}
#| fig-width: 4
#| fig-height: 3

mydata %>% 
  ggplot(aes(x = ulcer.factor, fill=status.factor)) + 
  geom_bar(position = "fill") +
  theme_bw() +
  scale_fill_brewer(palette = "Paired")

```

```{r}
#| fig-width: 6
#| fig-height: 3


mydata %>% 
  ggplot(aes(x = age.factor, fill = status.factor)) +
  geom_bar() +
  theme_bw() +
  scale_fill_brewer(palette = "Paired")
```

```{r}
#| fig-width: 4
#| fig-height: 3

mydata %>% 
  ggplot(aes(x = ulcer.factor, fill=status.factor)) + 
  geom_bar() +
  theme_bw() +
  scale_fill_brewer(palette = "Paired") +
  facet_grid(sex.factor~age.factor)
```

## Analysis

### Using base R

Let's test mortality against sex.

```{r}

table(mydata$status.factor, mydata$sex.factor)
chisq.test(mydata$status.factor, mydata$sex.factor)

```

Note that `chisq.test()` defaults to the Yates continuity correction. It is fine to use this, but if you have a particular need not to, turn if off with `chisq.test(mydata$status.factor, mydata$sex.factor, correct=FALSE)`.

## Summarising factors with `library(finalfit)`

* Our own package
* Contains functions to summarise data for publication tables and figures
* Easily run regression analyses.  


```{r}

library(finalfit)

# F1 summary_factorlist to see options
mydata %>% 
  summary_factorlist(dependent = "status.factor", 
                     explanatory = "sex.factor",
                     p = TRUE,
                     column = TRUE)

```



```{r}

mydata %>% 
  summary_factorlist(dependent = "status.factor", 
                     explanatory = "age.factor",
                     p = TRUE,
                     column = TRUE)

```


`finalfit` also works with continuous variables


```{r}

mydata %>% 
  summary_factorlist(dependent = "status.factor", 
                     explanatory = "thickness",
                     p = TRUE,
                     column = TRUE)

```



## Summarising multiple factors

`finalfit` is useful for summarising multiple variables. We often want to summarise more than one factor or continuous variable against our `dependent` variable of interest. Think of Table 1 in a journal article. 

Here is a quick way of doing so using our `finalfit` package.



```{r}
#| message: false

mydata %>% 
  summary_factorlist(dependent = "status.factor", 
                     explanatory = c("sex.factor", "thickness"),
                     p = TRUE,
                     column = TRUE)

```



## Summarising factors with `library(tidyverse)`

### Example
`Tidyverse` gives the flexibility and power to examine millions of rows of your data any way you wish. The following are intended as an extension to what you have already done. These demonstrate some more advanced approaches to combining `tidy` functions. 

```{r}

# Calculate number of patients in each group
counted_data = mydata %>%
  count(ulcer.factor, status.factor)

# Add the total number of people in each status group
counted_data2 = counted_data %>%
  group_by(status.factor) %>%
  mutate(total = sum(n))   

```

```{r}

# Calculate the percentage of n to total
counted_data3 = counted_data2 %>%
  mutate(percentage = round(100*n/total, 1))

```

```{r}

# Create a combined columns of both n and percentage,
# using paste to add brackets around the percentage
counted_data4 = counted_data3 %>% 
  mutate(count_perc = paste0(n, " (", percentage, ")"))

```


Or combine everything together without the intermediate `counted_data` breaks.
```{r}

mydata %>%
  count(ulcer.factor, status.factor) %>%
  group_by(status.factor) %>%
  mutate(total = sum(n)) %>%
  mutate(percentage = round(100*n/total, 1)) %>% 
  mutate(count_perc = paste0(n, " (", percentage, ")")) %>% 
  select(-total, -n, -percentage) %>% 
  pivot_wider(names_from = status.factor, values_from = count_perc)

```



## Exercise 2

Using `finalfit` create a summary table with "status.factor" as the dependent variable and the following as explanatory variables:  

* `sex.factor`  
* `ulcer.factor`  
* `age.factor`   
* `thickness`   



Try changing the table to show `median` and `interquartile range` instead of mean and sd.  



## Exercise 3
By changing one and only one line in the following block create a new table showing the breakdown of `status.factor` by age and secondly the breakdown of `status.factor` by sex:

```{r}
#| eval: false

mydata %>%
  count(ulcer.factor, status.factor) %>%
  group_by(status.factor) %>%
  mutate(total = sum(n)) %>%
  mutate(percentage = round(100*n/total, 1)) %>% 
  mutate(count_perc = paste0(n, " (", percentage, ")")) %>% 
  select(-total, -n, -percentage) %>% 
  pivot_wider(names_from = status.factor, values_from = count_perc)

```


## Exercise 4
Reproduce the table from Exercise 2 but this time with row-wise percentages instead of col(column)-wise percentages.




# Solutions 

## Excercise 1 Solution

```{r}
mydata = mydata %>%
  mutate(age.factor = age.factor %>% 
           fct_recode(" 4 to 20" =  "[4,20]",
                      "21 to 40" = "(20,40]",
                      "41 to 60" = "(40,60]",
                      "61 to 95" = "(60,95]"))
```

## Excercise 2 Solution

```{r}
mydata %>% 
  summary_factorlist(dependent = "status.factor", 
                     explanatory = c("sex.factor", "ulcer.factor", "age.factor", "thickness"),
                     p = TRUE,
                     column = TRUE,
                     cont = "median")
```

## Excercise 3 Solution

```{r}
mydata %>%
  count(age.factor, sex.factor,status.factor) %>%
  group_by(status.factor) %>%
  mutate(total = sum(n)) %>%
  mutate(percentage = round(100*n/total, 1)) %>% 
  mutate(count_perc = paste0(n, " (", percentage, ")")) %>% 
  select(-total, -n, -percentage) %>% 
  pivot_wider(names_from = status.factor, values_from = count_perc)
```

## Excercise 4 Solution

```{r}
mydata %>% 
  summary_factorlist(dependent = "status.factor", 
                     explanatory = c("sex.factor", "ulcer.factor", "age.factor", "thickness"),
                     p = TRUE,
                     column = FALSE,
                     cont = "median")
```